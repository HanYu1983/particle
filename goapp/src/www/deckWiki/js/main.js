// Generated by Haxe 3.4.4
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Helper = function() { };
Helper.__name__ = true;
Helper.initFb = function(cb) {
	myapp.facebook.init("425311264344425",cb);
};
Helper.shareFb = function(name,link,picture,caption,description,cb) {
	myapp.facebook.postMessageToMyboard({ name : name, link : link, picture : picture, caption : caption, description : description, callback : cb});
};
Helper.getUrlHash = function() {
	return leo.utils.getHash();
};
Helper.trackingEvent = function(msg) {
	googleTracking.event(msg);
};
Helper.trackingClick = function(msg) {
	googleTracking.click(msg);
};
Helper.getTrackingCount = function(cb) {
	api.getAnalysticsData(cb);
};
Helper.authGoogle = function(useImmdiate,cb) {
	api.authGoogle(useImmdiate,cb);
};
Helper.authGoogleAndGetData = function(useImmdiate,cb) {
	Helper.authGoogle(useImmdiate,function(err,data) {
		if(err == null) {
			Helper.getTrackingCount(function(_err,_data) {
				cb(_err,_data);
			});
		} else {
			cb(err,null);
		}
	});
};
Helper.getMeta = function() {
	return admin.getMeta();
};
Helper.loginFb = function(cb) {
	myapp.facebook.login(function(ret) {
		cb(ret.authResponse.userID,ret.authResponse.accessToken);
	});
};
Helper.getUUID = function() {
	return leo.utils.generateUUID();
};
Helper.getCardsuits = function(fbid,token,cb) {
	cardSuit.load2(fbid,token,Helper.handleModel(function(ret) {
		cb(ret);
	}));
};
Helper.saveDeck = function(fbid,token,model,cb) {
	cardSuit.save2(fbid,token,model,Helper.handleModel(function(ret) {
		cb(ret);
	}));
};
Helper.createItem = function(model) {
	model.url = Helper.getImageUrlByGameAndId(model.game,model.cards[0]);
	var copymodel = JSON.parse(JSON.stringify(model));
	if(copymodel.name.length > 15) {
		copymodel.name = Std.string(copymodel.name.substr(0,15)) + "…";
	}
	return Helper.j("#tmpl_item").tmpl(copymodel);
};
Helper.loadDetail = function(game,cb) {
	api.cardInfo(game,function(err,data) {
		cb(data);
	});
};
Helper.hasDetail = function(game) {
	return api.hasInfo(game);
};
Helper.loadRead = function(cb) {
	api.loadRead(cb);
};
Helper.saveRead = function(data,cb) {
	api.saveRead(data,cb);
};
Helper.loadList = function(cb) {
	api.load(cb);
};
Helper.getImageUrlByGameAndId = function(game,id) {
	return api.cardimageurl(game,id);
};
Helper.createDetail = function(game,card) {
	if(game == "sangoWar") {
		card.url = Helper.getImageUrlByGameAndId(game,sangoWar.formatKey(card.id));
	} else {
		card.url = Helper.getImageUrlByGameAndId(game,card.id);
	}
	if(card.url == null) {
		card.url = "../common/images/card/cardback_0.png";
	}
	var div = Helper.j("#tmpl_bigCard").tmpl(card);
	div.find("div[game]").hide();
	div.find("div[game=" + game + "]").show();
	var tmp = JSON.stringify(card);
	div.attr("data",tmp);
	return div;
};
Helper.EnToCh = function(en) {
	switch(en) {
	case "army":
		return "軍武gogogo";
	case "balance":
		return "均衡";
	case "battleSpirits":
		return "戰魂";
	case "control":
		return "控制";
	case "crusade":
		return "Crusade";
	case "damage":
		return "燒殺";
	case "disgust":
		return "噁心";
	case "dragonZ":
		return "七龍珠TCG";
	case "gundamCrossWar":
		return "鋼彈交錯戰爭";
	case "gundamWar":
		return "鋼彈大戰";
	case "gundamWarN":
		return "鋼彈大戰Nex-A";
	case "heterodoxy":
		return "偏門";
	case "high_speed":
		return "小快";
	case "low_speed":
		return "後期";
	case "magic":
		return "魔法風雲會";
	case "middle_speed":
		return "中速";
	case "sangoWar":
		return "三國志大戰";
	case "sengoku":
		return "戰國大戰";
	case "sgs":
		return "三國殺陣面對決";
	case "ws":
		return "黑白雙翼";
	case "yugioh":
		return "遊戲王";
	default:
		return "";
	}
};
Helper.isAdmin = function() {
	return admin.admin;
};
Helper.handleModel = function(func) {
	return function(err,ret) {
		if(err != null) {
			js_Browser.alert(err);
		} else {
			func(ret);
		}
	};
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Lambda = function() { };
Lambda.__name__ = true;
Lambda.has = function(it,elt) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(x1 == elt) {
			return true;
		}
	}
	return false;
};
Lambda.foreach = function(it,f) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		if(!f(x1)) {
			return false;
		}
	}
	return true;
};
Lambda.fold = function(it,f,first) {
	var x = $iterator(it)();
	while(x.hasNext()) {
		var x1 = x.next();
		first = f(x1,first);
	}
	return first;
};
Lambda.find = function(it,f) {
	var v = $iterator(it)();
	while(v.hasNext()) {
		var v1 = v.next();
		if(f(v1)) {
			return v1;
		}
	}
	return null;
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,isEmpty: function() {
		return this.h == null;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	var j = $;
	org_puremvc_haxe_patterns_facade_Facade.getInstance().registerMediator(new view_ViewController("ViewController",j("body")));
	org_puremvc_haxe_patterns_facade_Facade.getInstance().registerMediator(new model_ModelController("ModelController"));
	org_puremvc_haxe_patterns_facade_Facade.getInstance().sendNotification(view_ViewController.do_show_loading,{ show : true});
	var initApp = function(event) {
		Helper.initFb(function() {
			Helper.authGoogleAndGetData(true,function(err,data) {
				if(err == null) {
					org_puremvc_haxe_patterns_facade_Facade.getInstance().sendNotification(view_ViewController.do_show_auth,{ show : false});
					org_puremvc_haxe_patterns_facade_Facade.getInstance().sendNotification("do_save_count",{ countMap : data});
					org_puremvc_haxe_patterns_facade_Facade.getInstance().sendNotification("do_load_all_list");
					org_puremvc_haxe_patterns_facade_Facade.getInstance().sendNotification(view_ViewController.do_show_loading,{ show : false});
					org_puremvc_haxe_patterns_facade_Facade.getInstance().sendNotification(view_ViewController.do_enable_login,{ enable : true});
				} else {
					org_puremvc_haxe_patterns_facade_Facade.getInstance().sendNotification("do_load_all_list");
					org_puremvc_haxe_patterns_facade_Facade.getInstance().sendNotification(view_ViewController.do_enable_login,{ enable : true});
				}
			});
		});
	};
	var onHtmlClick = function(type,value) {
		if(type == "onGapiLoad") {
			initApp(value);
		}
	};
	window["haxe"] = { onHtmlClick : onHtmlClick};
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
var Type = function() { };
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_Browser = function() { };
js_Browser.__name__ = true;
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var org_puremvc_haxe_interfaces_INotifier = function() { };
org_puremvc_haxe_interfaces_INotifier.__name__ = true;
var org_puremvc_haxe_patterns_observer_Notifier = function() {
	this.facade = org_puremvc_haxe_patterns_facade_Facade.getInstance();
};
org_puremvc_haxe_patterns_observer_Notifier.__name__ = true;
org_puremvc_haxe_patterns_observer_Notifier.__interfaces__ = [org_puremvc_haxe_interfaces_INotifier];
org_puremvc_haxe_patterns_observer_Notifier.prototype = {
	sendNotification: function(notificationName,body,type) {
		this.facade.sendNotification(notificationName,body,type);
	}
};
var org_puremvc_haxe_interfaces_IMediator = function() { };
org_puremvc_haxe_interfaces_IMediator.__name__ = true;
var org_puremvc_haxe_patterns_mediator_Mediator = function(mediatorName,viewComponent) {
	org_puremvc_haxe_patterns_observer_Notifier.call(this);
	this.mediatorName = mediatorName != null ? mediatorName : org_puremvc_haxe_patterns_mediator_Mediator.NAME;
	if(viewComponent != null) {
		this.viewComponent = viewComponent;
	}
};
org_puremvc_haxe_patterns_mediator_Mediator.__name__ = true;
org_puremvc_haxe_patterns_mediator_Mediator.__interfaces__ = [org_puremvc_haxe_interfaces_IMediator];
org_puremvc_haxe_patterns_mediator_Mediator.__super__ = org_puremvc_haxe_patterns_observer_Notifier;
org_puremvc_haxe_patterns_mediator_Mediator.prototype = $extend(org_puremvc_haxe_patterns_observer_Notifier.prototype,{
	getMediatorName: function() {
		return this.mediatorName;
	}
	,setViewComponent: function(viewComponent) {
		this.viewComponent = viewComponent;
	}
	,getViewComponent: function() {
		return this.viewComponent;
	}
	,listNotificationInterests: function() {
		return [];
	}
	,handleNotification: function(notification) {
	}
	,onRegister: function() {
	}
	,onRemove: function() {
	}
});
var model_ModelController = function(mediatorName,viewComponent) {
	this.ary_read = [];
	org_puremvc_haxe_patterns_mediator_Mediator.call(this,mediatorName,viewComponent);
};
model_ModelController.__name__ = true;
model_ModelController.__super__ = org_puremvc_haxe_patterns_mediator_Mediator;
model_ModelController.prototype = $extend(org_puremvc_haxe_patterns_mediator_Mediator.prototype,{
	listNotificationInterests: function() {
		return ["on_item_click","on_item_over","on_input_search_change","on_pag_page_change","on_btn_output_click","on_btn_self_click","on_btn_gotoDeckManager_click","on_btn_gotoGroup_click","on_btn_login_click","on_btn_addDeck_click","on_btn_saveDeck_click","on_btn_share_deck_click","on_btn_seeCount_click","on_btn_getShareLink_click","on_btn_copy_click","do_load_all_list","do_save_count"];
	}
	,handleNotification: function(notification) {
		var _gthis = this;
		var _g = notification.getName();
		switch(_g) {
		case "on_btn_copy_click":
			var deckuid = notification.getBody().deckuid;
			if(this.fbid == null) {
				this.loginFb(function() {
					_gthis.copyDeckToMyAccount(deckuid);
				});
			} else {
				this.copyDeckToMyAccount(deckuid);
			}
			break;
		case "on_btn_getShareLink_click":
			var uid = notification.getBody().deckuid;
			var url = "https://" + window.location.host + window.location.pathname + "?uid=" + uid;
			this.sendNotification(view_ViewController.do_show_alert,{ alert : url});
			break;
		case "on_btn_gotoDeckManager_click":
			var deckuid1 = notification.getBody().deckuid;
			var deck = this.findDataById(this.data,deckuid1);
			var _g1 = deck.game;
			switch(_g1) {
			case "sangoWar":
				window.open("../card/manager_deck.html?game=sangoWar&lang=ch","_blank");
				break;
			case "yugioh":
				window.open("../card/manager_deck.html?game=yugioh&lang=ch","_blank");
				break;
			default:
				window.open("../card/manager_deck.html?game=" + deck.game,"_blank");
			}
			break;
		case "on_btn_gotoGroup_click":
			window.open("https://www.facebook.com/%E4%B8%8A%E5%96%84%E8%8B%A5%E6%B0%B4app-1653920964852269/","_blank");
			break;
		case "on_btn_login_click":
			this.loginFb();
			break;
		case "on_btn_output_click":
			var deckuid2 = notification.getBody().deckuid;
			var cards = this.findDataById(this.data,deckuid2).cards;
			this.sendNotification(view_ViewController.do_show_output,{ uid : deckuid2, str : JSON.stringify(cards)});
			break;
		case "on_btn_saveDeck_click":
			this.sendNotification(view_ViewController.do_show_loading,{ show : true});
			Helper.saveDeck(this.fbid,this.token,notification.getBody().savedata,function(ret) {
				_gthis.sendNotification(view_ViewController.do_show_loading,{ show : false});
				_gthis.sendNotification("on_cardsuit_save_success");
				_gthis.doLoadList();
			});
			break;
		case "on_btn_seeCount_click":
			Helper.authGoogleAndGetData(false,function(err,data) {
				if(err == null) {
					_gthis.doSaveCount(data);
					_gthis.pushCountToData();
					_gthis.doLoadList();
					_gthis.sendNotification(view_ViewController.do_show_auth,{ show : false});
				} else {
					_gthis.sendNotification(view_ViewController.do_show_alert,{ alert : err});
				}
			});
			break;
		case "on_btn_self_click":
			if(this.fbid == null) {
				this.loginFb(function() {
					_gthis.showMyShareDeck();
				});
			} else {
				this.showMyShareDeck();
			}
			break;
		case "on_btn_share_deck_click":
			var uid1 = notification.getBody().deckuid;
			var shareobj = this.findDataById(this.ary_result,uid1);
			var url1 = "https://" + window.location.host + window.location.pathname + "?uid=" + uid1;
			var picture = "https:" + Helper.getImageUrlByGameAndId(shareobj.game,shareobj.cards[0]);
			this.sendNotification(view_ViewController.do_show_loading,{ show : true});
			Helper.shareFb(Helper.getMeta().desc,url1,picture,Helper.getMeta().name,shareobj.desc,function(ret1) {
				_gthis.sendNotification(view_ViewController.do_show_loading,{ show : false});
			});
			break;
		case "on_input_search_change":
			var searchConditions = notification.getBody().value;
			var showData = this.multiSearch(searchConditions);
			this.sendNotification(view_ViewController.do_show_list,{ data : this.filterByPage(showData,0), total : showData.length});
			break;
		case "on_item_click":
			var id = notification.getBody().id;
			var game = notification.getBody().game;
			var doLoad = notification.getBody().doLoad;
			var clickData = this.findDataById(this.data,id);
			if(clickData == null) {
				return;
			}
			this.sendShowBigList(clickData,doLoad);
			break;
		case "on_item_over":
			var id1 = notification.getBody().id;
			var game1 = notification.getBody().game;
			this.sendNotification(view_ViewController.do_show_showDetail,{ showDetail : this.findDataById(this.data,id1)});
			break;
		case "on_pag_page_change":
			var page = Math.floor(notification.getBody().number - 1);
			this.sendNotification(view_ViewController.do_show_list,{ data : this.filterByPage(this.ary_result,page), total : this.ary_result.length});
			break;
		default:
			var str = _g;
			if(str == "do_save_count") {
				this.doSaveCount(notification.getBody().countMap);
			} else {
				var str1 = _g;
				if(str1 == "do_load_all_list") {
					this.doLoadList(true);
				}
			}
		}
	}
	,showMyShareDeck: function() {
		var searchConditions = { author : this.fbid};
		var showData = this.multiSearch(searchConditions);
		this.sendNotification(view_ViewController.do_show_list,{ data : this.filterByPage(showData,0), total : showData.length});
	}
	,copyDeckToMyAccount: function(deckuid) {
		var deck = this.findDataById(this.data,deckuid);
		this.sendNotification("on_copy_success",{ game : deck.game, name : deck.name, cards : deck.cards});
	}
	,loginFb: function(cb) {
		var _gthis = this;
		this.sendNotification(view_ViewController.do_show_loading,{ show : true});
		Helper.loginFb(function(fbid,token) {
			_gthis.fbid = fbid;
			_gthis.token = token;
			_gthis.sendNotification("on_facebook_login",{ fbid : fbid, token : token});
			Helper.getCardsuits(fbid,token,function(ret) {
				_gthis.sendNotification("on_cardsuit_load",{ cardsuit : ret});
				_gthis.sendNotification(view_ViewController.do_show_loading,{ show : false});
				if(cb != null) {
					cb();
				}
			});
		});
	}
	,doSaveCount: function(map) {
		this.countMap = map;
	}
	,doLoadList: function(checkHash) {
		if(checkHash == null) {
			checkHash = false;
		}
		var _gthis = this;
		this.sendNotification(view_ViewController.do_show_loading,{ show : true});
		Helper.loadList(function(err,data) {
			_gthis.sendNotification(view_ViewController.do_show_loading,{ show : false});
			if(err != null) {
				_gthis.sendNotification("on_loadPublic_error",{ err : err});
				return;
			}
			if(checkHash) {
				Helper.loadRead(function(err1,readData) {
					if(readData != null) {
						_gthis.ary_read = JSON.parse(readData);
					}
					_gthis.doSetData(data);
					_gthis.checkHashAndShow();
				});
			} else {
				_gthis.doSetData(data);
			}
		});
	}
	,checkHashAndShow: function() {
		if(Helper.getUrlHash().uid != null && Helper.getUrlHash().uid.length != 0) {
			var showData = this.findDataById(this.data,Helper.getUrlHash().uid);
			this.sendShowBigList(showData);
		}
	}
	,sendShowBigList: function(deck,load) {
		if(load == null) {
			load = false;
		}
		if(deck == null) {
			this.sendNotification(view_ViewController.do_show_alert,{ alert : "這個套牌作者已經停止分享囉!"});
			return;
		}
		this.loadDetail(deck,load);
	}
	,loadDetail: function(deck,load) {
		if(load == null) {
			load = false;
		}
		var _gthis = this;
		this.sendNotification(view_ViewController.do_show_loading,{ show : true});
		var cards = deck.cards;
		var game = deck.game;
		var onLoadSuccess = function(ary_send) {
			var ary_send1 = ary_send.filter(function(item) {
				return item != null;
			});
			deck.read = true;
			if(_gthis.ary_read != null && _gthis.ary_read.indexOf(deck.id) == -1) {
				_gthis.ary_read.push(deck.id);
				Helper.saveRead(JSON.stringify(_gthis.ary_read),function(err,appSaveRet) {
					if(err != null) {
						_gthis.sendNotification(view_ViewController.do_show_alert,{ alert : err});
					} else {
						_gthis.sendNotification(view_ViewController.do_show_loading,{ show : false});
						_gthis.sendNotification(view_ViewController.do_show_bigList,{ clickData : deck, game : game, ary_showData : ary_send1});
					}
				});
			} else {
				_gthis.sendNotification(view_ViewController.do_show_loading,{ show : false});
				_gthis.sendNotification(view_ViewController.do_show_bigList,{ clickData : deck, game : game, ary_showData : ary_send1});
			}
		};
		if(load) {
			Helper.loadDetail(game,function(data) {
				var ary_showData = cards.map(function(str) {
					var retobj = null;
					if(game == "sangoWar") {
						str = StringTools.replace(str,".jpg","");
						retobj = Lambda.find(data,function(oriData) {
							return oriData.id.indexOf(str) == 0;
						});
					} else {
						retobj = Lambda.find(data,function(oriData1) {
							return oriData1.id == str;
						});
					}
					retobj = Lambda.find(data,function(oriData2) {
						return oriData2.id.indexOf(str) == 0;
					});
					if(retobj == null) {
						retobj = { id : str, content : "暫時沒有資料!"};
					}
					return retobj;
				});
				onLoadSuccess(ary_showData);
			});
		} else {
			if(Helper.hasDetail(game)) {
				this.loadDetail(deck,true);
				return;
			}
			var ary_showData1 = cards.map(function(str1) {
				if(game == "sangoWar") {
					return { id : StringTools.replace(str1,".jpg",""), noData : true};
				} else {
					return { id : str1, noData : true};
				}
			});
			onLoadSuccess(ary_showData1);
		}
	}
	,doSetData: function(data) {
		this.oriDataToUseData(data);
		this.pushCountToData();
		this.setDataRead();
		this.sendNotification(view_ViewController.do_show_list,{ data : this.filterByPage(this.ary_result,0), total : this.ary_result.length, pageNumber : 1});
	}
	,setDataRead: function() {
		var _gthis = this;
		Lambda.foreach(this.data,function(item) {
			item.read = _gthis.ary_read.indexOf(item.id) != -1;
			return true;
		});
	}
	,filterByPage: function(from,page) {
		if(page == null) {
			page = 0;
		}
		var sid = page * 20;
		var eid = sid + 20 < from.length ? sid + 20 : from.length;
		var _g = from.length;
		var l = _g;
		if(l < 20) {
			return from.slice(0,from.length);
		} else {
			return from.slice(sid,eid);
		}
	}
	,multiSearch: function(value) {
		var _gthis = this;
		var ret = null;
		var filterDataByCheckNull = function(fn,f) {
			if(ret == null) {
				ret = fn(_gthis.data,Reflect.field(value,f));
			} else {
				var ret1 = Reflect.field(value,f);
				ret = fn(ret,ret1);
			}
		};
		var _g = 0;
		var _g1 = Reflect.fields(value);
		while(_g < _g1.length) {
			var f1 = _g1[_g];
			++_g;
			switch(f1) {
			case "author":
				filterDataByCheckNull($bind(this,this.filterDataByAuthor),f1);
				break;
			case "deckName":
				filterDataByCheckNull($bind(this,this.filterDataByDeckName),f1);
				break;
			case "describe":
				filterDataByCheckNull($bind(this,this.filterDataByDescribe),f1);
				break;
			case "game":
				filterDataByCheckNull($bind(this,this.filterDataByGame),f1);
				break;
			case "type":
				filterDataByCheckNull($bind(this,this.filterDataByType),f1);
				break;
			}
		}
		return this.ary_result = ret;
	}
	,findDataById: function(from,id) {
		return Lambda.find(from,function(item) {
			return item.id == id;
		});
	}
	,filterDataByDeckName: function(from,name) {
		return from.filter(function(obj) {
			return obj.name.indexOf(name) != -1;
		});
	}
	,filterDataByDescribe: function(from,name) {
		return from.filter(function(obj) {
			return obj.desc.indexOf(name) != -1;
		});
	}
	,filterDataByAuthor: function(from,author) {
		return from.filter(function(obj) {
			if(author != "") {
				return obj.author == author;
			} else {
				return true;
			}
		});
	}
	,filterDataByGame: function(from,game) {
		return from.filter(function(obj) {
			if(game != "") {
				return obj.game == game;
			} else {
				return true;
			}
		});
	}
	,filterDataByType: function(from,type) {
		return from.filter(function(obj) {
			if(type != "") {
				return obj.type == type;
			} else {
				return true;
			}
		});
	}
	,oriDataToUseData: function(ori) {
		this.data = Lambda.fold(ori,function(item,first) {
			if(item.uid == null) {
				return first;
			}
			item.id = item.uid;
			item.author = item.username;
			item.gameName = Helper.EnToCh(item.game);
			if(item.gameName == "") {
				console.log("缺少中文翻譯,請補上:" + Std.string(item.game));
			}
			item.typeName = Helper.EnToCh(item.type);
			if(item.gameName == "") {
				console.log("缺少中文翻譯,請補上:" + Std.string(item.type));
			}
			item.desc = item.desc == null ? "" : item.desc;
			first.push(item);
			return first;
		},[]);
		this.ary_result = this.data;
	}
	,pushCountToData: function() {
		var _gthis = this;
		Lambda.foreach(this.data,function(item) {
			item.viewCount = Reflect.field(_gthis.countMap,"on_item_view:" + item.id);
			item.shareCount = Reflect.field(_gthis.countMap,"on_item_share:" + item.id);
			item.outputCount = Reflect.field(_gthis.countMap,"on_item_output:" + item.id);
			if(item.viewCount == null) {
				item.viewCount = 0;
			}
			if(item.shareCount == null) {
				item.shareCount = 0;
			}
			if(item.outputCount == null) {
				item.outputCount = 0;
			}
			return true;
		});
	}
});
var org_puremvc_haxe_interfaces_IController = function() { };
org_puremvc_haxe_interfaces_IController.__name__ = true;
var org_puremvc_haxe_core_Controller = function() {
	org_puremvc_haxe_core_Controller.instance = this;
	this.commandMap = new haxe_ds_StringMap();
	this.initializeController();
};
org_puremvc_haxe_core_Controller.__name__ = true;
org_puremvc_haxe_core_Controller.__interfaces__ = [org_puremvc_haxe_interfaces_IController];
org_puremvc_haxe_core_Controller.getInstance = function() {
	if(org_puremvc_haxe_core_Controller.instance == null) {
		org_puremvc_haxe_core_Controller.instance = new org_puremvc_haxe_core_Controller();
	}
	return org_puremvc_haxe_core_Controller.instance;
};
org_puremvc_haxe_core_Controller.prototype = {
	initializeController: function() {
		this.view = org_puremvc_haxe_core_View.getInstance();
	}
	,executeCommand: function(note) {
		var _this = this.commandMap;
		var key = note.getName();
		var commandClassRef = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(commandClassRef == null) {
			return;
		}
		var commandInstance = Type.createInstance(commandClassRef,[]);
		commandInstance.execute(note);
	}
	,registerCommand: function(notificationName,commandClassRef) {
		var _this = this.commandMap;
		if(!(__map_reserved[notificationName] != null ? _this.existsReserved(notificationName) : _this.h.hasOwnProperty(notificationName))) {
			this.view.registerObserver(notificationName,new org_puremvc_haxe_patterns_observer_Observer($bind(this,this.executeCommand),this));
		}
		var _this1 = this.commandMap;
		if(__map_reserved[notificationName] != null) {
			_this1.setReserved(notificationName,commandClassRef);
		} else {
			_this1.h[notificationName] = commandClassRef;
		}
	}
	,hasCommand: function(notificationName) {
		var _this = this.commandMap;
		if(__map_reserved[notificationName] != null) {
			return _this.existsReserved(notificationName);
		} else {
			return _this.h.hasOwnProperty(notificationName);
		}
	}
	,removeCommand: function(notificationName) {
		if(this.hasCommand(notificationName)) {
			this.view.removeObserver(notificationName,this);
			this.commandMap.remove(notificationName);
		}
	}
};
var org_puremvc_haxe_interfaces_IModel = function() { };
org_puremvc_haxe_interfaces_IModel.__name__ = true;
var org_puremvc_haxe_core_Model = function() {
	org_puremvc_haxe_core_Model.instance = this;
	this.proxyMap = new haxe_ds_StringMap();
	this.initializeModel();
};
org_puremvc_haxe_core_Model.__name__ = true;
org_puremvc_haxe_core_Model.__interfaces__ = [org_puremvc_haxe_interfaces_IModel];
org_puremvc_haxe_core_Model.getInstance = function() {
	if(org_puremvc_haxe_core_Model.instance == null) {
		org_puremvc_haxe_core_Model.instance = new org_puremvc_haxe_core_Model();
	}
	return org_puremvc_haxe_core_Model.instance;
};
org_puremvc_haxe_core_Model.prototype = {
	initializeModel: function() {
	}
	,registerProxy: function(proxy) {
		var _this = this.proxyMap;
		var key = proxy.getProxyName();
		if(__map_reserved[key] != null) {
			_this.setReserved(key,proxy);
		} else {
			_this.h[key] = proxy;
		}
		proxy.onRegister();
	}
	,retrieveProxy: function(proxyName) {
		var _this = this.proxyMap;
		if(__map_reserved[proxyName] != null) {
			return _this.getReserved(proxyName);
		} else {
			return _this.h[proxyName];
		}
	}
	,hasProxy: function(proxyName) {
		var _this = this.proxyMap;
		if(__map_reserved[proxyName] != null) {
			return _this.existsReserved(proxyName);
		} else {
			return _this.h.hasOwnProperty(proxyName);
		}
	}
	,removeProxy: function(proxyName) {
		var _this = this.proxyMap;
		var proxy = __map_reserved[proxyName] != null ? _this.getReserved(proxyName) : _this.h[proxyName];
		if(proxy != null) {
			this.proxyMap.remove(proxyName);
			proxy.onRemove();
		}
		return proxy;
	}
};
var org_puremvc_haxe_interfaces_IView = function() { };
org_puremvc_haxe_interfaces_IView.__name__ = true;
var org_puremvc_haxe_core_View = function() {
	org_puremvc_haxe_core_View.instance = this;
	this.mediatorMap = new haxe_ds_StringMap();
	this.observerMap = new haxe_ds_StringMap();
	this.initializeView();
};
org_puremvc_haxe_core_View.__name__ = true;
org_puremvc_haxe_core_View.__interfaces__ = [org_puremvc_haxe_interfaces_IView];
org_puremvc_haxe_core_View.getInstance = function() {
	if(org_puremvc_haxe_core_View.instance == null) {
		org_puremvc_haxe_core_View.instance = new org_puremvc_haxe_core_View();
	}
	return org_puremvc_haxe_core_View.instance;
};
org_puremvc_haxe_core_View.prototype = {
	initializeView: function() {
	}
	,registerObserver: function(notificationName,observer) {
		var _this = this.observerMap;
		if(!(__map_reserved[notificationName] != null ? _this.existsReserved(notificationName) : _this.h.hasOwnProperty(notificationName))) {
			var _this1 = this.observerMap;
			var value = new List();
			if(__map_reserved[notificationName] != null) {
				_this1.setReserved(notificationName,value);
			} else {
				_this1.h[notificationName] = value;
			}
		}
		var _this2 = this.observerMap;
		(__map_reserved[notificationName] != null ? _this2.getReserved(notificationName) : _this2.h[notificationName]).add(observer);
	}
	,notifyObservers: function(notification) {
		var _this = this.observerMap;
		var key = notification.getName();
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			var _this1 = this.observerMap;
			var key1 = notification.getName();
			var observers_ref = __map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1];
			var observers = new List();
			var iterator_ref = new _$List_ListIterator(observers_ref.h);
			var observer = iterator_ref;
			while(observer.hasNext()) {
				var observer1 = observer.next();
				observers.add(observer1);
			}
			var iterator = new _$List_ListIterator(observers.h);
			var observer2 = iterator;
			while(observer2.hasNext()) {
				var observer3 = observer2.next();
				observer3.notifyObserver(notification);
			}
		}
	}
	,removeObserver: function(notificationName,notifyContext) {
		var _this = this.observerMap;
		var observers = __map_reserved[notificationName] != null ? _this.getReserved(notificationName) : _this.h[notificationName];
		var _g_head = observers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var observer = val;
			if(observer.compareNotifyContext(notifyContext) == true) {
				observers.remove(observer);
				break;
			}
		}
		if(observers.isEmpty()) {
			this.observerMap.remove(notificationName);
		}
	}
	,registerMediator: function(mediator) {
		var _this = this.mediatorMap;
		var key = mediator.getMediatorName();
		if(__map_reserved[key] != null ? _this.existsReserved(key) : _this.h.hasOwnProperty(key)) {
			return;
		}
		var _this1 = this.mediatorMap;
		var key1 = mediator.getMediatorName();
		if(__map_reserved[key1] != null) {
			_this1.setReserved(key1,mediator);
		} else {
			_this1.h[key1] = mediator;
		}
		var interests = mediator.listNotificationInterests();
		if(interests.length > 0) {
			var observer = new org_puremvc_haxe_patterns_observer_Observer($bind(mediator,mediator.handleNotification),mediator);
			var _g1 = 0;
			var _g = interests.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.registerObserver(interests[i],observer);
			}
		}
		mediator.onRegister();
	}
	,retrieveMediator: function(mediatorName) {
		var _this = this.mediatorMap;
		if(__map_reserved[mediatorName] != null) {
			return _this.getReserved(mediatorName);
		} else {
			return _this.h[mediatorName];
		}
	}
	,removeMediator: function(mediatorName) {
		var _this = this.mediatorMap;
		var mediator = __map_reserved[mediatorName] != null ? _this.getReserved(mediatorName) : _this.h[mediatorName];
		if(mediator != null) {
			var interests = mediator.listNotificationInterests();
			var _g1 = 0;
			var _g = interests.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.removeObserver(interests[i],mediator);
			}
			this.mediatorMap.remove(mediatorName);
			mediator.onRemove();
		}
		return mediator;
	}
	,hasMediator: function(mediatorName) {
		var _this = this.mediatorMap;
		if(__map_reserved[mediatorName] != null) {
			return _this.existsReserved(mediatorName);
		} else {
			return _this.h.hasOwnProperty(mediatorName);
		}
	}
};
var org_puremvc_haxe_interfaces_ICommand = function() { };
org_puremvc_haxe_interfaces_ICommand.__name__ = true;
var org_puremvc_haxe_interfaces_IFacade = function() { };
org_puremvc_haxe_interfaces_IFacade.__name__ = true;
var org_puremvc_haxe_interfaces_INotification = function() { };
org_puremvc_haxe_interfaces_INotification.__name__ = true;
var org_puremvc_haxe_interfaces_IObserver = function() { };
org_puremvc_haxe_interfaces_IObserver.__name__ = true;
var org_puremvc_haxe_interfaces_IProxy = function() { };
org_puremvc_haxe_interfaces_IProxy.__name__ = true;
var org_puremvc_haxe_patterns_facade_Facade = function() {
	org_puremvc_haxe_patterns_facade_Facade.instance = this;
	this.initializeFacade();
};
org_puremvc_haxe_patterns_facade_Facade.__name__ = true;
org_puremvc_haxe_patterns_facade_Facade.__interfaces__ = [org_puremvc_haxe_interfaces_IFacade];
org_puremvc_haxe_patterns_facade_Facade.getInstance = function() {
	if(org_puremvc_haxe_patterns_facade_Facade.instance == null) {
		org_puremvc_haxe_patterns_facade_Facade.instance = new org_puremvc_haxe_patterns_facade_Facade();
	}
	return org_puremvc_haxe_patterns_facade_Facade.instance;
};
org_puremvc_haxe_patterns_facade_Facade.prototype = {
	initializeFacade: function() {
		this.initializeModel();
		this.initializeController();
		this.initializeView();
	}
	,initializeController: function() {
		if(this.controller != null) {
			return;
		}
		this.controller = org_puremvc_haxe_core_Controller.getInstance();
	}
	,initializeModel: function() {
		if(this.model != null) {
			return;
		}
		this.model = org_puremvc_haxe_core_Model.getInstance();
	}
	,initializeView: function() {
		if(this.view != null) {
			return;
		}
		this.view = org_puremvc_haxe_core_View.getInstance();
	}
	,registerCommand: function(notificationName,commandClassRef) {
		this.controller.registerCommand(notificationName,commandClassRef);
	}
	,removeCommand: function(notificationName) {
		this.controller.removeCommand(notificationName);
	}
	,hasCommand: function(notificationName) {
		return this.controller.hasCommand(notificationName);
	}
	,registerProxy: function(proxy) {
		this.model.registerProxy(proxy);
	}
	,retrieveProxy: function(proxyName) {
		return this.model.retrieveProxy(proxyName);
	}
	,removeProxy: function(proxyName) {
		var proxy = null;
		if(this.model != null) {
			proxy = this.model.removeProxy(proxyName);
		}
		return proxy;
	}
	,hasProxy: function(proxyName) {
		return this.model.hasProxy(proxyName);
	}
	,registerMediator: function(mediator) {
		if(this.view != null) {
			this.view.registerMediator(mediator);
		}
	}
	,retrieveMediator: function(mediatorName) {
		return this.view.retrieveMediator(mediatorName);
	}
	,removeMediator: function(mediatorName) {
		var mediator = null;
		if(this.view != null) {
			mediator = this.view.removeMediator(mediatorName);
		}
		return mediator;
	}
	,hasMediator: function(mediatorName) {
		return this.view.hasMediator(mediatorName);
	}
	,sendNotification: function(notificationName,body,type) {
		this.notifyObservers(new org_puremvc_haxe_patterns_observer_Notification(notificationName,body,type));
	}
	,notifyObservers: function(notification) {
		if(this.view != null) {
			this.view.notifyObservers(notification);
		}
	}
};
var org_puremvc_haxe_patterns_observer_Notification = function(name,body,type) {
	this.name = name;
	if(body != null) {
		this.body = body;
	}
	if(type != null) {
		this.type = type;
	}
};
org_puremvc_haxe_patterns_observer_Notification.__name__ = true;
org_puremvc_haxe_patterns_observer_Notification.__interfaces__ = [org_puremvc_haxe_interfaces_INotification];
org_puremvc_haxe_patterns_observer_Notification.prototype = {
	getName: function() {
		return this.name;
	}
	,setBody: function(body) {
		this.body = body;
	}
	,getBody: function() {
		return this.body;
	}
	,setType: function(type) {
		this.type = type;
	}
	,getType: function() {
		return this.type;
	}
	,toString: function() {
		var msg = "Notification Name: " + this.getName();
		msg += "\nBody:" + (this.body == null ? "null" : this.body.toString());
		msg += "\nType:" + (this.type == null ? "null" : this.type);
		return msg;
	}
};
var org_puremvc_haxe_patterns_observer_Observer = function(notifyMethod,notifyContext) {
	this.setNotifyMethod(notifyMethod);
	this.setNotifyContext(notifyContext);
};
org_puremvc_haxe_patterns_observer_Observer.__name__ = true;
org_puremvc_haxe_patterns_observer_Observer.__interfaces__ = [org_puremvc_haxe_interfaces_IObserver];
org_puremvc_haxe_patterns_observer_Observer.prototype = {
	setNotifyMethod: function(notifyMethod) {
		this.notify = notifyMethod;
	}
	,setNotifyContext: function(notifyContext) {
		this.context = notifyContext;
	}
	,getNotifyMethod: function() {
		return this.notify;
	}
	,getNotifyContext: function() {
		return this.context;
	}
	,notifyObserver: function(notification) {
		(this.getNotifyMethod())(notification);
	}
	,compareNotifyContext: function(object) {
		return object == this.context;
	}
};
var view_ViewController = function(mediatorName,viewComponent) {
	this.j = $;
	var _gthis = this;
	org_puremvc_haxe_patterns_mediator_Mediator.call(this,mediatorName,viewComponent);
	this.mc_itemContainer = viewComponent.find("#mc_itemContainer");
	this.mc_bigItemContainer = viewComponent.find("#mc_bigItemContainer");
	this.mc_deckDetail = viewComponent.find("#mc_deckDetail");
	this.input_search = viewComponent.find("#input_searchId");
	this.slt_game = viewComponent.find("#slt_game");
	this.slt_type = viewComponent.find("#slt_type");
	this.pag_page = viewComponent.find("#pag_page");
	this.btn_output = viewComponent.find("#btn_output");
	this.btn_self = viewComponent.find("#btn_self");
	this.btn_login = viewComponent.find("#btn_login");
	this.btn_addDeck = viewComponent.find("#btn_addDeck");
	this.btn_saveDeck = viewComponent.find("#btn_saveDeck");
	this.btn_search = viewComponent.find("#btn_search");
	this.btn_seeCount = viewComponent.find("#btn_seeCount");
	this.btn_getShareLink = viewComponent.find("#btn_getShareLink");
	this.btn_copy = viewComponent.find("#btn_copy");
	this.dia_output = viewComponent.find("#dia_output");
	this.mc_backContainer = viewComponent.find("#mc_backContainer");
	this.mc_deckContainer = viewComponent.find("#mc_deckContainer");
	this.input_searchName = viewComponent.find("#input_searchName");
	this.input_searchDescribe = viewComponent.find("#input_searchDescribe");
	this.dia_saveForm = viewComponent.find("#dia_saveForm");
	this.mc_detail_panel = viewComponent.find("#mc_detail_panel");
	this.iframe_comment = viewComponent.find("#iframe_comment");
	this.dia_saveForm.dialog({ onClose : $bind(this,this.onCloseDetailForm)});
	this.mc_detail_panel.find("#btn_share").click(function() {
		var deckuid = _gthis.mc_detail_panel.attr("uid");
		_gthis.sendNotification("on_btn_share_deck_click",{ deckuid : deckuid});
		Helper.trackingEvent("on_item_share:" + deckuid);
	});
	this.input_search.textbox({ onChange : function(nv,ov) {
		var tmp = _gthis.getSearchConditions();
		_gthis.sendNotification("on_input_search_change",{ value : tmp});
	}});
	this.input_searchName.textbox({ onChange : function(nv1,ov1) {
		var tmp1 = _gthis.getSearchConditions();
		_gthis.sendNotification("on_input_search_change",{ value : tmp1});
	}});
	this.input_searchDescribe.textbox({ onChange : function(nv2,ov2) {
		var tmp2 = _gthis.getSearchConditions();
		_gthis.sendNotification("on_input_search_change",{ value : tmp2});
	}});
	var ary = admin.ary_games;
	var ary1 = [{ game : "", name : "不檢索"}].concat(ary);
	this.slt_game.combobox({ valueField : "game", textField : "name", data : ary1, onChange : function(nv3,ov3) {
		var tmp3 = _gthis.getSearchConditions();
		_gthis.sendNotification("on_input_search_change",{ value : tmp3});
	}});
	this.slt_type.combobox({ onChange : function(nv4,ov4) {
		var tmp4 = _gthis.getSearchConditions();
		_gthis.sendNotification("on_input_search_change",{ value : tmp4});
	}});
	this.btn_search.linkbutton({ onClick : function(nv5,ov5) {
		var tmp5 = _gthis.getSearchConditions();
		_gthis.sendNotification("on_input_search_change",{ value : tmp5});
	}});
	this.pag_page.pagination({ onSelectPage : function(number,size) {
		_gthis.sendNotification("on_pag_page_change",{ number : number, size : size});
	}});
	this.dia_output.dialog();
	this.dia_output.find("#btn_gotoGroup").click(function() {
		_gthis.sendNotification("on_btn_gotoGroup_click");
	});
	this.dia_output.find("#btn_gotoDeckManager").click(function() {
		var deckuid1 = _gthis.mc_detail_panel.attr("uid");
		_gthis.sendNotification("on_btn_gotoDeckManager_click",{ deckuid : deckuid1});
	});
	this.btn_seeCount.click(function() {
		_gthis.sendNotification("on_btn_seeCount_click");
	});
	this.btn_copy.click(function() {
		var deckuid2 = _gthis.mc_detail_panel.attr("uid");
		_gthis.sendNotification("on_btn_copy_click",{ deckuid : deckuid2});
		Helper.trackingEvent("on_item_output:" + deckuid2);
	});
	this.btn_getShareLink.click(function() {
		var deckuid3 = _gthis.mc_detail_panel.attr("uid");
		Helper.trackingEvent("on_item_share:" + deckuid3);
		_gthis.sendNotification("on_btn_getShareLink_click",{ deckuid : deckuid3});
	});
	this.btn_output.click(function() {
		var deckuid4 = _gthis.mc_detail_panel.attr("uid");
		_gthis.sendNotification("on_btn_output_click",{ deckuid : deckuid4});
	});
	this.btn_self.click(function() {
		_gthis.sendNotification("on_btn_self_click");
	});
	this.btn_login.linkbutton({ onClick : function() {
		_gthis.sendNotification("on_btn_login_click");
	}});
	this.btn_addDeck.click(function() {
		_gthis.addDeck({ game : "army", name : "default", backId : "0", cards : []});
		_gthis.enableSave(true);
	});
	this.btn_saveDeck.click(function() {
		var tmp6 = _gthis.getSaveDataFromDom();
		_gthis.sendNotification("on_btn_saveDeck_click",{ savedata : tmp6});
	});
	viewComponent.find("#layout_main").layout({ onCollapse : function() {
		viewComponent.find("#layout_main").attr("expand",false);
	}, onExpand : function() {
		viewComponent.find("#layout_main").attr("expand",true);
	}});
	if(Helper.isAdmin()) {
		var cardbackCount = admin.cardbackCount;
		var _g = [];
		var _g2 = 0;
		var _g1 = cardbackCount;
		while(_g2 < _g1) {
			var i = _g2++;
			_g.push(i);
		}
		Lambda.foreach(_g,function(bid) {
			var useId = bid + 1;
			var url = "../common/images/card/cardback_" + useId + ".jpg";
			var div = _gthis.j("#tmpl_back").tmpl({ id : useId, url : url});
			_gthis.mc_backContainer.append(div);
			return true;
		});
	}
};
view_ViewController.__name__ = true;
view_ViewController.__super__ = org_puremvc_haxe_patterns_mediator_Mediator;
view_ViewController.prototype = $extend(org_puremvc_haxe_patterns_mediator_Mediator.prototype,{
	listNotificationInterests: function() {
		return [view_ViewController.do_show_list,view_ViewController.do_show_bigList,view_ViewController.do_show_showDetail,view_ViewController.do_show_loading,view_ViewController.do_show_output,view_ViewController.do_show_alert,view_ViewController.do_enable_login,view_ViewController.do_show_auth,"on_loadPublic_error","on_facebook_login","on_cardsuit_load","on_cardsuit_save_success","on_copy_success"];
	}
	,handleNotification: function(notification) {
		var _g = notification.getName();
		switch(_g) {
		case "on_cardsuit_load":
			this.showDeckList(notification.getBody().cardsuit,true);
			this.enableAddDeck(true);
			this.showAllCardback();
			break;
		case "on_cardsuit_save_success":
			this.showMessage("存檔成功");
			this.enableSave(false);
			break;
		case "on_copy_success":
			var name = notification.getBody().name;
			var cards = notification.getBody().cards;
			var game = notification.getBody().game;
			this.addDeck({ game : game, name : name, backId : "0", cards : cards});
			this.enableSave(true);
			this.showManagerPanel(true);
			this.showMessage("收錄成功，別忘了按儲存按鈕哦!");
			break;
		case "on_facebook_login":
			this.enableLogin(false);
			this.showMessage("登入成功");
			break;
		case "on_loadPublic_error":
			this.alert(notification.getBody().err);
			break;
		default:
			var str = _g;
			if(str == view_ViewController.do_show_alert) {
				this.alert(notification.getBody().alert);
			} else {
				var str1 = _g;
				if(str1 == view_ViewController.do_show_auth) {
					this.showAuth(notification.getBody().show);
				} else {
					var str2 = _g;
					if(str2 == view_ViewController.do_enable_login) {
						this.enableLogin(notification.getBody().enable);
					} else {
						var str3 = _g;
						if(str3 == view_ViewController.do_show_output) {
							if(notification.getBody().str == null) {
								this.alert("請選擇套牌哦!");
							} else {
								Helper.trackingEvent("on_item_output:" + Std.string(notification.getBody().uid));
								this.setOutput(notification.getBody().str);
							}
						} else {
							var str4 = _g;
							if(str4 == view_ViewController.do_show_loading) {
								this.showLoading(notification.getBody().show);
							} else {
								var str5 = _g;
								if(str5 == view_ViewController.do_show_bigList) {
									this.clickData = notification.getBody().clickData;
									this.openFBComment(this.clickData.uid);
									this.showBigList(this.clickData.uid,notification.getBody().game,notification.getBody().ary_showData);
									this.showDetail(notification.getBody().clickData);
								} else {
									var str6 = _g;
									if(str6 == view_ViewController.do_show_list) {
										this.setPagPage(notification.getBody().total,notification.getBody().pageNumber);
										this.showList(notification.getBody().data);
									} else {
										var str7 = _g;
										if(str7 == view_ViewController.do_show_showDetail) {
											this.showDetail(notification.getBody().showDetail);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	,openFBComment: function(uid) {
		var url = "comment.html?url=" + "https://" + window.location.host + window.location.pathname + "?uid=" + uid;
		this.iframe_comment.attr("src",url);
	}
	,onCloseDetailForm: function(e) {
		this.dia_saveForm.find("#btn_confirm").off("click");
	}
	,showAuth: function(show) {
		if(show) {
			this.btn_seeCount.show();
		} else {
			this.btn_seeCount.hide();
		}
	}
	,showDetailForm: function(show,dom,name) {
		var _gthis = this;
		if(show) {
			this.dia_saveForm.dialog("open");
			this.dia_saveForm.find("#txt_name").html(name);
			this.dia_saveForm.find("#slt_game").combobox("setValue",dom.attr("type"));
			this.dia_saveForm.find("#txt_desc").textbox("setValue",dom.attr("desc"));
			this.dia_saveForm.find("#btn_confirm").click(function() {
				var deckType = _gthis.dia_saveForm.find("#slt_game").combobox("getValue");
				var deckDesc = _gthis.dia_saveForm.find("#txt_desc").textbox("getValue");
				dom.attr("type",deckType);
				dom.attr("desc",deckDesc);
				_gthis.showDetailForm(false);
			});
		} else {
			this.dia_saveForm.dialog("close");
		}
	}
	,showDeckList: function(retModel,sort) {
		if(sort == null) {
			sort = false;
		}
		var _gthis = this;
		var oldtop = this.mc_deckContainer.parent().parent().scrollTop();
		this.mc_deckContainer.empty();
		if(sort) {
			retModel.cardSuit.sort(function(aobj,bobj) {
				return aobj.game.localeCompare(bobj.game);
			});
		}
		retModel.cardSuit.forEach(function(deck) {
			_gthis.addDeck(deck);
		});
		this.mc_deckContainer.parent().parent().scrollTop(oldtop);
	}
	,checkSameName: function() {
		var _gthis = this;
		var ary_hasName = [];
		this.mc_deckContainer.children().each(function(id,dom) {
			dom = _gthis.j(dom);
			var deckname = dom.find("#txt_name").textbox("getValue");
			if(Lambda.has(ary_hasName,deckname)) {
				deckname += "_" + Helper.getUUID();
				dom.find("#txt_name").textbox("setValue",deckname);
			}
			ary_hasName.push(deckname);
		});
	}
	,getSaveDataFromDom: function() {
		var _gthis = this;
		this.checkSameName();
		var savefile = { cardSuit : []};
		this.mc_deckContainer.children().each(function(id,dom) {
			dom = _gthis.j(dom);
			var cardstr = dom.find("#txt_cards").textbox("getValue");
			var _this_r = new RegExp("\\\\t","g".split("u").join(""));
			cardstr = cardstr.replace(_this_r,"");
			cardstr = "[" + cardstr + "]";
			savefile.cardSuit.push({ uid : dom.attr("uid"), type : dom.attr("type"), desc : dom.attr("desc"), name : dom.find("#txt_name").textbox("getValue"), game : dom.find(".easyui-combobox").combobox("getValue"), cards : JSON.parse(cardstr), backId : dom.find("#txt_back").textbox("getValue"), "public" : dom.find("#btn_public").hasClass("l-btn-selected")});
		});
		return savefile;
	}
	,addDeck: function(deckModel) {
		var _gthis = this;
		deckModel.games = admin.ary_games;
		var dom = this.j("#tmpl_deck").tmpl(deckModel);
		this.mc_deckContainer.append(dom);
		dom.attr("type",deckModel.type);
		dom.attr("desc",deckModel.desc);
		dom.attr("uid",deckModel.uid);
		dom.find("#btn_public").linkbutton({ selected : Reflect.field(deckModel,"public") == null ? false : Reflect.field(deckModel,"public"), onClick : function() {
			var _this = _gthis.j($(this));
			if(_this.parent().attr("uid") == "" || _this.parent().attr("uid") == null) {
				_this.parent().attr("uid",Helper.getUUID());
			}
			_gthis.enableSave(true);
		}});
		dom.find(".easyui-tooltip").tooltip({ position : "top"});
		dom.find(".easyui-linkbutton").linkbutton();
		dom.find("#btn_remove").linkbutton({ onClick : function() {
			var _this1 = _gthis.j($(this));
			_this1.parent().remove();
			_gthis.enableSave(true);
		}});
		dom.find("#btn_detail").linkbutton({ onClick : function() {
			var _this2 = _gthis.j($(this));
			var deckName = _this2.parent().find("#txt_name").textbox("getValue");
			var tmp = _this2.parent();
			_gthis.showDetailForm(true,tmp,deckName);
			_gthis.enableSave(true);
		}});
		dom.find(".easyui-combobox").combobox({ value : deckModel.game, onSelect : function() {
			_gthis.enableSave(true);
		}});
		dom.find(".easyui-textbox").textbox({ onChange : function(nv,ov) {
			var _this3 = $(this);
			var _g = _this3.attr("id");
			if(_g == "txt_cards") {
				try {
					JSON.parse("[" + nv + "]");
					_gthis.enableSave(true);
				} catch( e ) {
					_gthis.alert("格式輸入錯誤，請檢查");
					_this3.textbox({ value : ""});
				}
			} else {
				_gthis.enableSave(true);
			}
		}});
		var str = JSON.stringify(deckModel.cards);
		str = HxOverrides.substr(str,1,str.length - 2);
		var cardstr = str;
		dom.find("#txt_cards").textbox({ value : cardstr});
		dom.find("#txt_name").textbox({ value : deckModel.name});
	}
	,hideCardBackContainer: function() {
		if(!Helper.isAdmin()) {
			this.mc_backContainer.parent().hide();
		}
	}
	,showAllCardback: function() {
		this.mc_backContainer.find(".cardback").show();
	}
	,enableLogin: function(enable) {
		if(enable) {
			this.btn_login.linkbutton("enable");
		} else {
			this.btn_login.linkbutton("disable");
		}
	}
	,enableSave: function(enable) {
		if(enable) {
			this.btn_saveDeck.linkbutton("enable");
		} else {
			this.btn_saveDeck.linkbutton("disable");
		}
	}
	,enableAddDeck: function(enable) {
		if(enable) {
			this.btn_addDeck.linkbutton("enable");
		} else {
			this.btn_addDeck.linkbutton("disable");
		}
	}
	,alert: function(msg) {
		this.j.messager.alert("提示",msg);
	}
	,setOutput: function(deckstr) {
		this.dia_output.dialog("open");
		deckstr = StringTools.replace(StringTools.replace(deckstr,"[",""),"]","");
		this.dia_output.find("#input_output").textbox("setValue",deckstr);
	}
	,showLoading: function(show) {
		if(show) {
			this.j.messager.progress({ msg : "讀取資料中，請稍等…"});
		} else {
			this.j.messager.progress("close");
		}
	}
	,setPagPage: function(total,pageNumber) {
		if(pageNumber != null) {
			this.pag_page.pagination("refresh",{ total : total, pageNumber : pageNumber});
		} else {
			this.pag_page.pagination("refresh",{ total : total});
		}
	}
	,getSearchConditions: function() {
		return { author : this.input_search.textbox("getValue"), deckName : this.input_searchName.textbox("getValue"), describe : this.input_searchDescribe.textbox("getValue"), game : this.slt_game.combobox("getValue"), type : this.slt_type.combobox("getValue")};
	}
	,showDetail: function(detail) {
		if(detail != null) {
			this.mc_detail_panel.show();
			this.mc_detail_panel.attr("uid",detail.id);
			this.mc_detail_panel.find("#txt_id").html(detail.username);
			this.mc_detail_panel.find("#txt_name").html(detail.name);
			this.mc_detail_panel.find("#txt_type").html(detail.typeName);
			this.mc_detail_panel.find("#txt_desc").html(detail.desc);
			this.mc_detail_panel.find(".shareTxt").eq(0).html(detail.viewCount);
			this.mc_detail_panel.find(".shareTxt").eq(1).html(detail.shareCount);
			this.mc_detail_panel.find(".shareTxt").eq(2).html(detail.outputCount);
			this.mc_detail_panel.find("#img_title").attr("src",Helper.getImageUrlByGameAndId(detail.game,detail.cards[0]));
		}
	}
	,showBigList: function(uid,game,ary_showData) {
		var _gthis = this;
		this.mc_itemContainer.find("[id=" + uid + "]").find("#mc_readInfo").hide();
		this.mc_bigItemContainer.empty();
		Lambda.foreach(ary_showData,function(item) {
			var dom = Helper.createDetail(game,item);
			if(item.noData != null && item.noData) {
				dom.tooltip({ position : "top", content : "點擊取得詳細資料!"});
				dom.click(function() {
					dom.tooltip("hide");
					_gthis.sendNotification("on_item_click",{ id : uid, game : game, doLoad : true});
				});
			}
			dom.find("#mc_detail > div[game=" + game + "]").hide();
			dom.find("#mc_black").hide();
			_gthis.mc_bigItemContainer.append(dom);
			return true;
		});
		this.overListener(game);
		this.showManagerPanel(false);
		Helper.trackingEvent("on_item_view:" + uid);
	}
	,showManagerPanel: function(show) {
		if(show) {
			if(this.viewComponent.find("#layout_main").attr("expand") == null || this.viewComponent.find("#layout_main").attr("expand") == "false") {
				this.viewComponent.find("#layout_main").layout("expand","east");
			}
		} else {
			this.viewComponent.find("#layout_main").layout("collapse","east");
		}
	}
	,overListener: function(game) {
		var _gthis = this;
		this.mc_bigItemContainer.find(".big_card_root").off("mouseover");
		this.mc_bigItemContainer.find(".big_card_root").off("mouseout");
		this.mc_bigItemContainer.find(".big_card_root").mouseover(function(e) {
			_gthis.j(e.currentTarget).find("#mc_detail > div[game=" + game + "]").show();
			_gthis.j(e.currentTarget).find("#mc_black").show();
		});
		this.mc_bigItemContainer.find(".big_card_root").mouseout(function(e1) {
			_gthis.hideAllDetail(game);
		});
	}
	,hideAllDetail: function(game) {
		this.mc_bigItemContainer.find("#mc_detail > div[game=" + game + "]").hide();
		this.mc_bigItemContainer.find(".big_card_root > #mc_black").hide();
	}
	,showList: function(data) {
		var _gthis = this;
		this.mc_itemContainer.empty();
		Lambda.foreach(data,function(item) {
			var dom = Helper.createItem(item);
			dom.mouseover(function(e) {
				var dom1 = _gthis.j(e.currentTarget);
				dom1.css("border","1px solid yellow");
				var tmp = dom1.attr("id");
				var tmp1 = dom1.attr("game");
				_gthis.sendNotification("on_item_over",{ id : tmp, game : tmp1});
			});
			dom.mouseout(function(e1) {
				var dom2 = _gthis.j(e1.currentTarget);
				dom2.css("border","1px solid gray");
				_gthis.showDetail(_gthis.clickData);
				var tmp2 = dom2.attr("id");
				var tmp3 = dom2.attr("game");
				_gthis.sendNotification("on_item_out",{ id : tmp2, game : tmp3});
			});
			dom.click(function(e2) {
				var dom3 = _gthis.j(e2.currentTarget);
				var tmp4 = dom3.attr("id");
				var tmp5 = dom3.attr("game");
				_gthis.sendNotification("on_item_click",{ id : tmp4, game : tmp5, doLoad : false});
			});
			if(item.read != null) {
				if(!item.read) {
					dom.find("#mc_readInfo").show();
				} else {
					dom.find("#mc_readInfo").hide();
				}
			}
			_gthis.mc_itemContainer.append(dom);
			return true;
		});
	}
	,showMessage: function(msg) {
		this.j.messager.show({ title : "提示", msg : msg, timeout : 2000, showType : "slide"});
	}
});
function $iterator(o) { if( o instanceof Array ) return function() { return HxOverrides.iter(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Helper.j = $;
org_puremvc_haxe_patterns_mediator_Mediator.NAME = "Mediator";
model_ModelController.do_load_all_list = "do_load_all_list";
model_ModelController.do_save_count = "do_save_count";
model_ModelController.on_facebook_login = "on_facebook_login";
model_ModelController.on_cardsuit_load = "on_cardsuit_load";
model_ModelController.on_cardsuit_save_success = "on_cardsuit_save_success";
model_ModelController.on_loadPublic_error = "on_loadPublic_error";
model_ModelController.on_copy_success = "on_copy_success";
view_ViewController.do_show_list = "do_show_list";
view_ViewController.do_show_bigList = "do_show_bigList";
view_ViewController.do_show_showDetail = "do_show_showDetail";
view_ViewController.do_show_loading = "do_show_loading";
view_ViewController.do_show_output = "do_show_output";
view_ViewController.do_show_alert = "do_show_alert";
view_ViewController.do_enable_login = "do_enable_login";
view_ViewController.do_show_auth = "do_show_auth";
view_ViewController.on_item_click = "on_item_click";
view_ViewController.on_item_over = "on_item_over";
view_ViewController.on_item_out = "on_item_out";
view_ViewController.on_input_search_change = "on_input_search_change";
view_ViewController.on_pag_page_change = "on_pag_page_change";
view_ViewController.on_btn_output_click = "on_btn_output_click";
view_ViewController.on_btn_seeCount_click = "on_btn_seeCount_click";
view_ViewController.on_btn_getShareLink_click = "on_btn_getShareLink_click";
view_ViewController.on_btn_copy_click = "on_btn_copy_click";
view_ViewController.on_btn_self_click = "on_btn_self_click";
view_ViewController.on_btn_login_click = "on_btn_login_click";
view_ViewController.on_btn_gotoGroup_click = "on_btn_gotoGroup_click";
view_ViewController.on_btn_gotoDeckManager_click = "on_btn_gotoDeckManager_click";
view_ViewController.on_btn_addDeck_click = "on_btn_addDeck_click";
view_ViewController.on_btn_saveDeck_click = "on_btn_saveDeck_click";
view_ViewController.on_btn_share_deck_click = "on_btn_share_deck_click";
Main.main();
})();
